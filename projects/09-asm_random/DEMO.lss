
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080013e  0080013e  00000ac0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a71  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2e  00000000  00000000  00002689  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdd  00000000  00000000  000034b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00004194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee8  00000000  00000000  00004d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005bed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_13>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_18>
  4c:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	16 02       	muls	r17, r22
  6a:	18 02       	muls	r17, r24
  6c:	1a 02       	muls	r17, r26
  6e:	1c 02       	muls	r17, r28
  70:	1e 02       	muls	r17, r30
  72:	25 02       	muls	r18, r21
  74:	2c 02       	muls	r18, r28

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee ee       	ldi	r30, 0xEE	; 238
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ae 33       	cpi	r26, 0x3E	; 62
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ae e3       	ldi	r26, 0x3E	; 62
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 38       	cpi	r26, 0x87	; 135
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a8 04 	call	0x950	; 0x950 <main>
  ac:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <fsm_random>:
extern uint8_t rand8_asm(uint8_t current);

/* Functions ---------------------------------------------------------*/
/* Call assembly functions to generate psudo-random values. */
void fsm_random(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <fsm_random+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <fsm_random+0x8>
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t values = 0;
    static uint8_t last = 0;
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	c1 f1       	breq	.+112    	; 0x140 <fsm_random+0x8c>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <fsm_random+0x24>
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	e9 f0       	breq	.+58     	; 0x110 <fsm_random+0x5c>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <fsm_random+0xba>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	91 05       	cpc	r25, r1
  dc:	b1 f1       	breq	.+108    	; 0x14a <fsm_random+0x96>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f0       	breq	.+2      	; 0xe4 <fsm_random+0x30>
  e2:	45 c0       	rjmp	.+138    	; 0x16e <fsm_random+0xba>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 c0 04 	call	0x980	; 0x980 <__itoa_ncheck>
        break;

    // Send pseudo-random value to UART
    case UART_STATE:
        itoa(new, uart_string, 10);
        uart_puts(" "); uart_puts(uart_string);
  f6:	85 e1       	ldi	r24, 0x15	; 21
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uart_puts>
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uart_puts>
        last = new;
 106:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 10a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <last.1829>
 10e:	2f c0       	rjmp	.+94     	; 0x16e <fsm_random+0xba>
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
    case IDLE_STATE:
        if (values < 20) {
 110:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 114:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 118:	84 31       	cpi	r24, 0x14	; 20
 11a:	91 05       	cpc	r25, r1
 11c:	18 f4       	brcc	.+6      	; 0x124 <fsm_random+0x70>
            current_state = RAND4_STATE;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	27 c0       	rjmp	.+78     	; 0x172 <fsm_random+0xbe>
        } else if (values < 100) {
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	91 05       	cpc	r25, r1
 128:	40 f5       	brcc	.+80     	; 0x17a <fsm_random+0xc6>
            if (values == 20) {
 12a:	44 97       	sbiw	r24, 0x14	; 20
 12c:	31 f4       	brne	.+12     	; 0x13a <fsm_random+0x86>
                last = 0;
 12e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <last.1829>
                uart_puts("\r\n\r\n");
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uart_puts>
            }
            current_state = RAND8_STATE;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	19 c0       	rjmp	.+50     	; 0x172 <fsm_random+0xbe>
        }
        break;

    // Call 4-bit LFSR generator
    case RAND4_STATE:
        new = rand4_asm(last);
 140:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 144:	0e 94 85 04 	call	0x90a	; 0x90a <rand4_asm>
 148:	04 c0       	rjmp	.+8      	; 0x152 <fsm_random+0x9e>
        current_state = UART_STATE;
        break;

    // Call 8-bit LFSR generator
    case RAND8_STATE:
        new = rand8_asm(last);
 14a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 14e:	0e 94 94 04 	call	0x928	; 0x928 <rand8_asm>
 152:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
        values++;
 156:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 15a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <values.1828+0x1>
 164:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <values.1828>
        current_state = UART_STATE;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <fsm_random+0xbe>
        last = new;
        current_state = IDLE_STATE;
        break;

    default:
        current_state = IDLE_STATE;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_13>:

/* Interrupts --------------------------------------------------------*/
/* Timer1 overflow interrupt routine.
 * Update state of the FSM. */
ISR(TIMER1_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
    fsm_random();
 1ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <fsm_random>
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <twi_init>:

/* Functions ---------------------------------------------------------*/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	8f 7c       	andi	r24, 0xCF	; 207
 1d6:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	80 63       	ori	r24, 0x30	; 48
 1dc:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 1de:	e9 eb       	ldi	r30, 0xB9	; 185
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8c 7f       	andi	r24, 0xFC	; 252
 1e6:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 1e8:	88 e9       	ldi	r24, 0x98	; 152
 1ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1ee:	08 95       	ret

000001f0 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 1f0:	94 ea       	ldi	r25, 0xA4	; 164
 1f2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 1f6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1fa:	97 ff       	sbrs	r25, 7
 1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 1fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 208:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 20c:	87 ff       	sbrs	r24, 7
 20e:	fc cf       	rjmp	.-8      	; 0x208 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 210:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 214:	98 7f       	andi	r25, 0xF8	; 248
    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
        if (twi_response == 0x18 || twi_response == 0x40) {
 216:	98 31       	cpi	r25, 0x18	; 24
 218:	19 f0       	breq	.+6      	; 0x220 <twi_start+0x30>
        return 0;   /* Slave device accessible */
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 34       	cpi	r25, 0x40	; 64
 21e:	09 f4       	brne	.+2      	; 0x222 <twi_start+0x32>
 220:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return 1;   /* Failed to access slave device */
    }
}
 222:	08 95       	ret

00000224 <twi_write>:


/*--------------------------------------------------------------------*/
void twi_write(uint8_t data)
{
    TWDR = data;
 224:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 228:	84 e8       	ldi	r24, 0x84	; 132
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 22e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 232:	87 ff       	sbrs	r24, 7
 234:	fc cf       	rjmp	.-8      	; 0x22e <twi_write+0xa>
}
 236:	08 95       	ret

00000238 <twi_read_ack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_ack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 238:	84 ec       	ldi	r24, 0xC4	; 196
 23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 242:	87 ff       	sbrs	r24, 7
 244:	fc cf       	rjmp	.-8      	; 0x23e <twi_read_ack+0x6>
	return (TWDR);
 246:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 24a:	08 95       	ret

0000024c <twi_read_nack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 24c:	84 e8       	ldi	r24, 0x84	; 132
 24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 252:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 256:	87 ff       	sbrs	r24, 7
 258:	fc cf       	rjmp	.-8      	; 0x252 <twi_read_nack+0x6>
	return (TWDR);
 25a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 25e:	08 95       	ret

00000260 <twi_stop>:


/*--------------------------------------------------------------------*/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 266:	08 95       	ret

00000268 <GPIO_config_output>:
/*  Functions  ---------------------------------------------------------*/
void  GPIO_config_output(volatile  uint8_t *reg_name , uint8_t  pin_num)
{
    
    // Body of the  function
    *reg_name  |= _BV(pin_num);
 268:	fc 01       	movw	r30, r24
 26a:	40 81       	ld	r20, Z
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <GPIO_config_output+0xc>
 272:	22 0f       	add	r18, r18
 274:	6a 95       	dec	r22
 276:	ea f7       	brpl	.-6      	; 0x272 <GPIO_config_output+0xa>
 278:	24 2b       	or	r18, r20
 27a:	20 83       	st	Z, r18
 27c:	08 95       	ret

0000027e <GPIO_write>:
    }

 void GPIO_write(volatile uint8_t *reg_name,uint8_t pin_num,uint8_t pin_val) 
 {
 27e:	fc 01       	movw	r30, r24
    
    
    if (pin_val == PIN_LOW)
    {
        *reg_name  &= ~_BV(pin_num);
 280:	80 81       	ld	r24, Z
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	01 c0       	rjmp	.+2      	; 0x28a <GPIO_write+0xc>
 288:	22 0f       	add	r18, r18
 28a:	6a 95       	dec	r22
 28c:	ea f7       	brpl	.-6      	; 0x288 <GPIO_write+0xa>

 void GPIO_write(volatile uint8_t *reg_name,uint8_t pin_num,uint8_t pin_val) 
 {
    
    
    if (pin_val == PIN_LOW)
 28e:	41 11       	cpse	r20, r1
 290:	03 c0       	rjmp	.+6      	; 0x298 <GPIO_write+0x1a>
    {
        *reg_name  &= ~_BV(pin_num);
 292:	20 95       	com	r18
 294:	28 23       	and	r18, r24
 296:	01 c0       	rjmp	.+2      	; 0x29a <GPIO_write+0x1c>
    }
    else 
    {
            *reg_name  |= _BV(pin_num);
 298:	28 2b       	or	r18, r24
 29a:	20 83       	st	Z, r18
 29c:	08 95       	ret

0000029e <GPIO_toggle>:
    }  
void GPIO_toggle(volatile uint8_t *reg_name,uint8_t pin_num)
{
    
    // Body of the  function
    *reg_name  ^= _BV(pin_num);
 29e:	fc 01       	movw	r30, r24
 2a0:	40 81       	ld	r20, Z
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <GPIO_toggle+0xc>
 2a8:	22 0f       	add	r18, r18
 2aa:	6a 95       	dec	r22
 2ac:	ea f7       	brpl	.-6      	; 0x2a8 <GPIO_toggle+0xa>
 2ae:	24 27       	eor	r18, r20
 2b0:	20 83       	st	Z, r18
 2b2:	08 95       	ret

000002b4 <GPIO_config_input_nopull>:
    } 
 void GPIO_config_input_nopull(volatile uint8_t *ddr_name , volatile uint8_t *port_name, uint8_t pin_num)
 {
 2b4:	fc 01       	movw	r30, r24
    
    // Body of the  function
    *port_name  &= ~_BV(pin_num);
 2b6:	db 01       	movw	r26, r22
 2b8:	9c 91       	ld	r25, X
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <GPIO_config_input_nopull+0xe>
 2c0:	22 0f       	add	r18, r18
 2c2:	4a 95       	dec	r20
 2c4:	ea f7       	brpl	.-6      	; 0x2c0 <GPIO_config_input_nopull+0xc>
 2c6:	20 95       	com	r18
 2c8:	92 23       	and	r25, r18
 2ca:	9c 93       	st	X, r25
    *ddr_name  &= ~_BV(pin_num);
 2cc:	80 81       	ld	r24, Z
 2ce:	28 23       	and	r18, r24
 2d0:	20 83       	st	Z, r18
 2d2:	08 95       	ret

000002d4 <GPIO_config_input_pullup>:

    }   
void GPIO_config_input_pullup(volatile uint8_t *ddr_name , volatile uint8_t *port_name,uint8_t pin_num)
{
 2d4:	fc 01       	movw	r30, r24
    
    // Body of the  function
    *ddr_name  &= ~_BV(pin_num);
 2d6:	90 81       	ld	r25, Z
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <GPIO_config_input_pullup+0xc>
 2de:	22 0f       	add	r18, r18
 2e0:	4a 95       	dec	r20
 2e2:	ea f7       	brpl	.-6      	; 0x2de <GPIO_config_input_pullup+0xa>
 2e4:	82 2f       	mov	r24, r18
 2e6:	80 95       	com	r24
 2e8:	98 23       	and	r25, r24
 2ea:	90 83       	st	Z, r25
    *port_name  |= _BV(pin_num);
 2ec:	fb 01       	movw	r30, r22
 2ee:	80 81       	ld	r24, Z
 2f0:	28 2b       	or	r18, r24
 2f2:	20 83       	st	Z, r18
 2f4:	08 95       	ret

000002f6 <GPIO_read>:

    } 
 uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
    //return bit_is_clear(*reg_name, pin_num);
    return ((*reg_name & _BV(pin_num)) >> pin_num);
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 81       	ld	r18, Z
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	06 2e       	mov	r0, r22
 300:	02 c0       	rjmp	.+4      	; 0x306 <GPIO_read+0x10>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <GPIO_read+0xc>
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	82 23       	and	r24, r18
 30e:	93 23       	and	r25, r19
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_read+0x20>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_read+0x1c>
 31a:	08 95       	ret

0000031c <TIM_config_prescaler>:
/* Functions ---------------------------------------------------------*/
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 31c:	81 11       	cpse	r24, r1
 31e:	31 c0       	rjmp	.+98     	; 0x382 <TIM_config_prescaler+0x66>
        switch (presc_val) {
 320:	63 30       	cpi	r22, 0x03	; 3
 322:	f9 f0       	breq	.+62     	; 0x362 <TIM_config_prescaler+0x46>
 324:	50 f4       	brcc	.+20     	; 0x33a <TIM_config_prescaler+0x1e>
 326:	66 23       	and	r22, r22
 328:	79 f0       	breq	.+30     	; 0x348 <TIM_config_prescaler+0x2c>
 32a:	61 30       	cpi	r22, 0x01	; 1
 32c:	39 f5       	brne	.+78     	; 0x37c <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 32e:	85 b5       	in	r24, 0x25	; 37
 330:	8b 7f       	andi	r24, 0xFB	; 251
 332:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 334:	85 b5       	in	r24, 0x25	; 37
 336:	82 60       	ori	r24, 0x02	; 2
 338:	0f c0       	rjmp	.+30     	; 0x358 <TIM_config_prescaler+0x3c>
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
 33a:	65 30       	cpi	r22, 0x05	; 5
 33c:	41 f0       	breq	.+16     	; 0x34e <TIM_config_prescaler+0x32>
 33e:	66 30       	cpi	r22, 0x06	; 6
 340:	e9 f4       	brne	.+58     	; 0x37c <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 342:	85 b5       	in	r24, 0x25	; 37
 344:	84 60       	ori	r24, 0x04	; 4
 346:	13 c0       	rjmp	.+38     	; 0x36e <TIM_config_prescaler+0x52>
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 348:	85 b5       	in	r24, 0x25	; 37
 34a:	8b 7f       	andi	r24, 0xFB	; 251
 34c:	10 c0       	rjmp	.+32     	; 0x36e <TIM_config_prescaler+0x52>
                TCCR0B = TCCR0B |  _BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR0B = TCCR0B |  _BV(CS02);
 34e:	85 b5       	in	r24, 0x25	; 37
 350:	84 60       	ori	r24, 0x04	; 4
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 352:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 354:	85 b5       	in	r24, 0x25	; 37
 356:	8d 7f       	andi	r24, 0xFD	; 253
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
                TCCR0B = TCCR0B |  _BV(CS01);
 358:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS00);
 35a:	85 b5       	in	r24, 0x25	; 37
 35c:	8e 7f       	andi	r24, 0xFE	; 254
 35e:	85 bd       	out	0x25, r24	; 37
                break;
 360:	08 95       	ret
            case TIM_PRESC_64:
                /* 011 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	8b 7f       	andi	r24, 0xFB	; 251
 366:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	03 c0       	rjmp	.+6      	; 0x374 <TIM_config_prescaler+0x58>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 36e:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 370:	85 b5       	in	r24, 0x25	; 37
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS00);
 376:	85 b5       	in	r24, 0x25	; 37
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	f1 cf       	rjmp	.-30     	; 0x35e <TIM_config_prescaler+0x42>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 37c:	85 b5       	in	r24, 0x25	; 37
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	e8 cf       	rjmp	.-48     	; 0x352 <TIM_config_prescaler+0x36>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	09 f0       	breq	.+2      	; 0x388 <TIM_config_prescaler+0x6c>
 386:	44 c0       	rjmp	.+136    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        switch (presc_val) {
 388:	63 30       	cpi	r22, 0x03	; 3
 38a:	d1 f0       	breq	.+52     	; 0x3c0 <TIM_config_prescaler+0xa4>
 38c:	68 f4       	brcc	.+26     	; 0x3a8 <TIM_config_prescaler+0x8c>
 38e:	66 23       	and	r22, r22
 390:	99 f0       	breq	.+38     	; 0x3b8 <TIM_config_prescaler+0x9c>
 392:	61 30       	cpi	r22, 0x01	; 1
 394:	69 f5       	brne	.+90     	; 0x3f0 <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 396:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 3a0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	2c c0       	rjmp	.+88     	; 0x400 <__LOCK_REGION_LENGTH__>
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
 3a8:	65 30       	cpi	r22, 0x05	; 5
 3aa:	99 f0       	breq	.+38     	; 0x3d2 <TIM_config_prescaler+0xb6>
 3ac:	66 30       	cpi	r22, 0x06	; 6
 3ae:	01 f5       	brne	.+64     	; 0x3f0 <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 3b0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <TIM_config_prescaler+0xbe>
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 3b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	0d c0       	rjmp	.+26     	; 0x3da <TIM_config_prescaler+0xbe>
                TCCR1B = TCCR1B |  _BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_64:
                /* 011 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 3c0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c4:	8b 7f       	andi	r24, 0xFB	; 251
 3c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 3ca:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <TIM_config_prescaler+0xc8>
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR1B = TCCR1B |  _BV(CS12);
 3d2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3d6:	84 60       	ori	r24, 0x04	; 4
 3d8:	0e c0       	rjmp	.+28     	; 0x3f6 <TIM_config_prescaler+0xda>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 3da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 3de:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3e2:	8d 7f       	andi	r24, 0xFD	; 253
 3e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS10);
 3e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	0d c0       	rjmp	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR1B = TCCR1B & ~_BV(CS12);
 3f0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 3fa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS10);
 404:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 40e:	08 95       	ret
        }
    }
    /* Timer/Counter2 */
     else if (timer_name == TIM2) {
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	e9 f5       	brne	.+122    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
        switch (presc_val) {
 414:	86 2f       	mov	r24, r22
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	87 30       	cpi	r24, 0x07	; 7
 41a:	91 05       	cpc	r25, r1
 41c:	48 f5       	brcc	.+82     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 41e:	fc 01       	movw	r30, r24
 420:	ec 5c       	subi	r30, 0xCC	; 204
 422:	ff 4f       	sbci	r31, 0xFF	; 255
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 111 */
                TCCR2B = TCCR2B |  _BV(CS22);
 424:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR1B = TCCR1B & ~_BV(CS10);
        }
    }
    /* Timer/Counter2 */
     else if (timer_name == TIM2) {
        switch (presc_val) {
 428:	0c 94 ba 04 	jmp	0x974	; 0x974 <__tablejump2__>
            case TIM_PRESC_1:
                /* 001 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 42c:	8b 7f       	andi	r24, 0xFB	; 251
 42e:	07 c0       	rjmp	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	0c c0       	rjmp	.+24     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_32:
                /* 011 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	11 c0       	rjmp	.+34     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_64:
                /* 100 */
                TCCR2B = TCCR2B |  _BV(CS22);
 438:	84 60       	ori	r24, 0x04	; 4
 43a:	1d c0       	rjmp	.+58     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_128:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 442:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 446:	8d 7f       	andi	r24, 0xFD	; 253
 448:	0d c0       	rjmp	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_256:
                /* 110 */
                TCCR2B = TCCR2B |  _BV(CS22);
 44a:	84 60       	ori	r24, 0x04	; 4
 44c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 450:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 454:	82 60       	ori	r24, 0x02	; 2
 456:	14 c0       	rjmp	.+40     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 111 */
                TCCR2B = TCCR2B |  _BV(CS22);
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 45e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 462:	82 60       	ori	r24, 0x02	; 2
 464:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS20);
 468:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 46c:	81 60       	ori	r24, 0x01	; 1
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
                break; 
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR2B = TCCR2B & ~_BV(CS22);
 470:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 474:	8b 7f       	andi	r24, 0xFB	; 251
 476:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 47a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 47e:	8d 7f       	andi	r24, 0xFD	; 253
 480:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS20);
 484:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 48e:	08 95       	ret

00000490 <TIM_config_interrupt>:
/*--------------------------------------------------------------------*/
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 490:	81 11       	cpse	r24, r1
 492:	0c c0       	rjmp	.+24     	; 0x4ac <TIM_config_interrupt+0x1c>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 494:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (interr_mode) {
 498:	66 23       	and	r22, r22
 49a:	21 f0       	breq	.+8      	; 0x4a4 <TIM_config_interrupt+0x14>
 49c:	61 30       	cpi	r22, 0x01	; 1
 49e:	11 f4       	brne	.+4      	; 0x4a4 <TIM_config_interrupt+0x14>
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <TIM_config_interrupt+0x16>
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 4a4:	8e 7f       	andi	r24, 0xFE	; 254
 4a6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
                break;
 4aa:	08 95       	ret
                /* Disable overflow interrupt */
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	61 f4       	brne	.+24     	; 0x4c8 <TIM_config_interrupt+0x38>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 4b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (interr_mode) {
 4b4:	66 23       	and	r22, r22
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <TIM_config_interrupt+0x30>
 4b8:	61 30       	cpi	r22, 0x01	; 1
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <TIM_config_interrupt+0x30>
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <TIM_config_interrupt+0x32>
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 4c0:	8e 7f       	andi	r24, 0xFE	; 254
 4c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 4c6:	08 95       	ret
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 4c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        }
        // TODO: Enable/disable interupt for Timer/Counter1
    }
    /* Timer/Counter2 */
    else {
        switch (interr_mode) {
 4cc:	66 23       	and	r22, r22
 4ce:	21 f0       	breq	.+8      	; 0x4d8 <TIM_config_interrupt+0x48>
 4d0:	61 30       	cpi	r22, 0x01	; 1
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <TIM_config_interrupt+0x48>
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <TIM_config_interrupt+0x4a>
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 4de:	08 95       	ret

000004e0 <SEG_toggle_clk>:
}

/*--------------------------------------------------------------------*/
void SEG_toggle_clk(void)
{
    GPIO_write(&PORTD,SEGMENT_CLK,1);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	67 e0       	ldi	r22, 0x07	; 7
 4e4:	8b e2       	ldi	r24, 0x2B	; 43
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ec:	8a e0       	ldi	r24, 0x0A	; 10
 4ee:	8a 95       	dec	r24
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <SEG_toggle_clk+0xe>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <SEG_toggle_clk+0x14>
    _delay_us(2);
    GPIO_write(&PORTD,SEGMENT_CLK,0);
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	67 e0       	ldi	r22, 0x07	; 7
 4f8:	8b e2       	ldi	r24, 0x2B	; 43
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <GPIO_write>

00000500 <SEG_putc>:
    0b00000010,   // Position 2
    0b00000001};  // Position 3

/* Functions ---------------------------------------------------------*/
void SEG_putc(uint8_t digit, uint8_t position)
{
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
    uint8_t i;

    /* Read values from look-up tables */
    digit    = segment_digit[digit];
 50e:	e8 2f       	mov	r30, r24
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ea 5f       	subi	r30, 0xFA	; 250
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	e0 80       	ld	r14, Z
    position = segment_position[position];
 518:	e6 2f       	mov	r30, r22
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ee 5f       	subi	r30, 0xFE	; 254
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	d0 80       	ld	r13, Z
 522:	c7 e0       	ldi	r28, 0x07	; 7
 524:	d0 e0       	ldi	r29, 0x00	; 0


    /* Put 1st byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "digit" bits
        GPIO_write(&PORTB, SEGMENT_DATA, ((digit & _BV(7-i))>>(7-i)));
 526:	01 e0       	ldi	r16, 0x01	; 1
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	f1 2c       	mov	r15, r1
 52c:	a8 01       	movw	r20, r16
 52e:	0c 2e       	mov	r0, r28
 530:	02 c0       	rjmp	.+4      	; 0x536 <SEG_putc+0x36>
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <SEG_putc+0x32>
 53a:	4e 21       	and	r20, r14
 53c:	5f 21       	and	r21, r15
 53e:	0c 2e       	mov	r0, r28
 540:	02 c0       	rjmp	.+4      	; 0x546 <SEG_putc+0x46>
 542:	55 95       	asr	r21
 544:	47 95       	ror	r20
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <SEG_putc+0x42>
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	85 e2       	ldi	r24, 0x25	; 37
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_write>
        SEG_toggle_clk();
 554:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SEG_toggle_clk>
 558:	21 97       	sbiw	r28, 0x01	; 1
 55a:	40 f7       	brcc	.-48     	; 0x52c <SEG_putc+0x2c>
 55c:	c7 e0       	ldi	r28, 0x07	; 7
 55e:	d0 e0       	ldi	r29, 0x00	; 0
    }
      
    /* Put 2nd byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "position"> bits
        GPIO_write(&PORTB, SEGMENT_DATA, ((position & _BV(7-i))>>(7-i)));
 560:	ee 24       	eor	r14, r14
 562:	e3 94       	inc	r14
 564:	f1 2c       	mov	r15, r1
 566:	0d 2d       	mov	r16, r13
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	a7 01       	movw	r20, r14
 56c:	0c 2e       	mov	r0, r28
 56e:	02 c0       	rjmp	.+4      	; 0x574 <SEG_putc+0x74>
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <SEG_putc+0x70>
 578:	40 23       	and	r20, r16
 57a:	51 23       	and	r21, r17
 57c:	0c 2e       	mov	r0, r28
 57e:	02 c0       	rjmp	.+4      	; 0x584 <SEG_putc+0x84>
 580:	55 95       	asr	r21
 582:	47 95       	ror	r20
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <SEG_putc+0x80>
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	85 e2       	ldi	r24, 0x25	; 37
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_write>
        SEG_toggle_clk();
 592:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SEG_toggle_clk>
 596:	21 97       	sbiw	r28, 0x01	; 1
 598:	40 f7       	brcc	.-48     	; 0x56a <SEG_putc+0x6a>
    }

    /* TODO: Generate 1 us latch pulse */
     GPIO_write(&PORTD,SEGMENT_LATCH,1);
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	64 e0       	ldi	r22, 0x04	; 4
 59e:	8b e2       	ldi	r24, 0x2B	; 43
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_write>
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	8a 95       	dec	r24
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <SEG_putc+0xa8>
 5ac:	00 00       	nop
    _delay_us(1);
    GPIO_write(&PORTD,SEGMENT_LATCH,0);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	64 e0       	ldi	r22, 0x04	; 4
 5b2:	8b e2       	ldi	r24, 0x2B	; 43
 5b4:	90 e0       	ldi	r25, 0x00	; 0
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
    }

    /* TODO: Generate 1 us latch pulse */
     GPIO_write(&PORTD,SEGMENT_LATCH,1);
    _delay_us(1);
    GPIO_write(&PORTD,SEGMENT_LATCH,0);
 5c4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <GPIO_write>

000005c8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 5c8:	29 9a       	sbi	0x05, 1	; 5
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	8a 95       	dec	r24
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <toggle_e+0x4>
 5d0:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 5d2:	29 98       	cbi	0x05, 1	; 5
 5d4:	08 95       	ret

000005d6 <lcd_write>:
*                0: write instruction
*  Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data, uint8_t rs)
{
 5d6:	cf 93       	push	r28
 5d8:	c8 2f       	mov	r28, r24
    unsigned char dataBits;


    if (rs) /* write data        (RS=1, RW=0) */
 5da:	66 23       	and	r22, r22
 5dc:	11 f0       	breq	.+4      	; 0x5e2 <lcd_write+0xc>
    {
        lcd_rs_high();
 5de:	28 9a       	sbi	0x05, 0	; 5
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <lcd_write+0xe>
    }
    else /* write instruction (RS=0, RW=0) */
    {
        lcd_rs_low();
 5e2:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 5e4:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 5e6:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 5e8:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 5ea:	57 9a       	sbi	0x0a, 7	; 10

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 5ec:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 5ee:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 5f0:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 5f2:	5c 98       	cbi	0x0b, 4	; 11
        if (data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 5f4:	c7 fd       	sbrc	r28, 7
 5f6:	5f 9a       	sbi	0x0b, 7	; 11
        if (data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 5f8:	c6 fd       	sbrc	r28, 6
 5fa:	5e 9a       	sbi	0x0b, 6	; 11
        if (data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 5fc:	c5 fd       	sbrc	r28, 5
 5fe:	5d 9a       	sbi	0x0b, 5	; 11
        if (data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 600:	c4 fd       	sbrc	r28, 4
 602:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_toggle();
 604:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 608:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 60a:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 60c:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 60e:	5c 98       	cbi	0x0b, 4	; 11
        if (data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 610:	c3 fd       	sbrc	r28, 3
 612:	5f 9a       	sbi	0x0b, 7	; 11
        if (data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 614:	c2 fd       	sbrc	r28, 2
 616:	5e 9a       	sbi	0x0b, 6	; 11
        if (data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 618:	c1 fd       	sbrc	r28, 1
 61a:	5d 9a       	sbi	0x0b, 5	; 11
        if (data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 61c:	c0 fd       	sbrc	r28, 0
 61e:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_toggle();
 620:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 624:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 626:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 628:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 62a:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62c:	8f e3       	ldi	r24, 0x3F	; 63
 62e:	9f e1       	ldi	r25, 0x1F	; 31
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <lcd_write+0x5a>
 634:	00 c0       	rjmp	.+0      	; 0x636 <lcd_write+0x60>
 636:	00 00       	nop

        /* FRYZA: EXPERIMENTALLY ADDED FOR ARDUINO UNO */
        _delay_ms(2);
    }
} /* lcd_write */
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <lcd_read.constprop.0>:
    uint8_t data;

    if (rs)
        lcd_rs_high();  /* RS=1: read data      */
    else
        lcd_rs_low();  /* RS=0: read busy flag */
 63c:	28 98       	cbi	0x05, 0	; 5
    lcd_rw_high();     /* RW=1  read mode      */
 63e:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 640:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 642:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 644:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 646:	57 98       	cbi	0x0a, 7	; 10

        /* read high nibble first */
        lcd_e_high();
 648:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64a:	85 e0       	ldi	r24, 0x05	; 5
 64c:	8a 95       	dec	r24
 64e:	f1 f7       	brne	.-4      	; 0x64c <lcd_read.constprop.0+0x10>
 650:	00 00       	nop
        lcd_e_delay();
        data = 0;
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 652:	4c 9b       	sbis	0x09, 4	; 9
 654:	02 c0       	rjmp	.+4      	; 0x65a <lcd_read.constprop.0+0x1e>
 656:	80 e1       	ldi	r24, 0x10	; 16
 658:	01 c0       	rjmp	.+2      	; 0x65c <lcd_read.constprop.0+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);

        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();
        data = 0;
 65a:	80 e0       	ldi	r24, 0x00	; 0
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if (PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 65c:	4d 99       	sbic	0x09, 5	; 9
 65e:	80 62       	ori	r24, 0x20	; 32
        if (PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 660:	4e 99       	sbic	0x09, 6	; 9
 662:	80 64       	ori	r24, 0x40	; 64
        if (PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 664:	4f 99       	sbic	0x09, 7	; 9
 666:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 668:	29 98       	cbi	0x05, 1	; 5
 66a:	95 e0       	ldi	r25, 0x05	; 5
 66c:	9a 95       	dec	r25
 66e:	f1 f7       	brne	.-4      	; 0x66c <lcd_read.constprop.0+0x30>
 670:	00 00       	nop

        lcd_e_delay(); /* Enable 500ns low       */

        /* read low nibble */
        lcd_e_high();
 672:	29 9a       	sbi	0x05, 1	; 5
 674:	95 e0       	ldi	r25, 0x05	; 5
 676:	9a 95       	dec	r25
 678:	f1 f7       	brne	.-4      	; 0x676 <lcd_read.constprop.0+0x3a>
 67a:	00 00       	nop
        lcd_e_delay();
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 67c:	4c 99       	sbic	0x09, 4	; 9
 67e:	81 60       	ori	r24, 0x01	; 1
        if (PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 680:	4d 99       	sbic	0x09, 5	; 9
 682:	82 60       	ori	r24, 0x02	; 2
        if (PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 684:	4e 99       	sbic	0x09, 6	; 9
 686:	84 60       	ori	r24, 0x04	; 4
        if (PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
 688:	4f 99       	sbic	0x09, 7	; 9
 68a:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 68c:	29 98       	cbi	0x05, 1	; 5
    }
    return data;
} /* lcd_read */
 68e:	08 95       	ret

00000690 <lcd_command>:
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    /* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE READ FUNCTION */
    /* lcd_waitbusy(); */
    lcd_write(cmd, 0);
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <lcd_write>

00000696 <lcd_data>:
*************************************************************************/
void lcd_data(uint8_t data)
{
    /* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE READ FUNCTION */
    /* lcd_waitbusy(); */
    lcd_write(data, 1);
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <lcd_write>

0000069c <lcd_gotoxy>:
{
    #if LCD_LINES == 1
    lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
    #endif
    #if LCD_LINES == 2
    if (y == 0)
 69c:	61 11       	cpse	r22, r1
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <lcd_gotoxy+0x8>
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
 6a0:	80 58       	subi	r24, 0x80	; 128
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <lcd_gotoxy+0xa>
    else
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE2 + x);
 6a4:	80 54       	subi	r24, 0x40	; 64
 6a6:	0c 94 48 03 	jmp	0x690	; 0x690 <lcd_command>

000006aa <lcd_getxy>:
static uint8_t lcd_waitbusy(void)
{
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c = lcd_read(0)) & (1 << LCD_BUSY))
 6aa:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd_read.constprop.0>
 6ae:	87 fd       	sbrc	r24, 7
 6b0:	fc cf       	rjmp	.-8      	; 0x6aa <lcd_getxy>
 6b2:	85 e1       	ldi	r24, 0x15	; 21
 6b4:	8a 95       	dec	r24
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <lcd_getxy+0xa>
 6b8:	00 00       	nop

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0)); // return address counter
 6ba:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd_read.constprop.0>
*************************************************************************/
/* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE THIS FUNCTION */
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <lcd_clrscr>:
/*************************************************************************
*  Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1 << LCD_CLR);
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0c 94 48 03 	jmp	0x690	; 0x690 <lcd_command>

000006c8 <lcd_home>:
/*************************************************************************
*  Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1 << LCD_HOME);
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	0c 94 48 03 	jmp	0x690	; 0x690 <lcd_command>

000006ce <lcd_putc>:
     *      }
     #endif
     *      lcd_waitbusy();
     #endif
     */
    lcd_write(c, 1);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <lcd_write>

000006d4 <lcd_puts>:
*  Input:    string to be displayed
*  Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) )
 6da:	89 91       	ld	r24, Y+
 6dc:	88 23       	and	r24, r24
 6de:	19 f0       	breq	.+6      	; 0x6e6 <lcd_puts+0x12>
    {
        lcd_putc(c);
 6e0:	0e 94 67 03 	call	0x6ce	; 0x6ce <lcd_putc>
 6e4:	fa cf       	rjmp	.-12     	; 0x6da <lcd_puts+0x6>
    }
}/* lcd_puts */
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <lcd_puts_p>:
*  Input:     string from program memory be be displayed
*  Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 6f2:	84 91       	lpm	r24, Z
 6f4:	ef 01       	movw	r28, r30
 6f6:	21 96       	adiw	r28, 0x01	; 1
 6f8:	88 23       	and	r24, r24
 6fa:	21 f0       	breq	.+8      	; 0x704 <lcd_puts_p+0x18>
    {
        lcd_putc(c);
 6fc:	0e 94 67 03 	call	0x6ce	; 0x6ce <lcd_putc>
 700:	fe 01       	movw	r30, r28
 702:	f7 cf       	rjmp	.-18     	; 0x6f2 <lcd_puts_p+0x6>
    }
}/* lcd_puts_p */
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 70a:	cf 93       	push	r28
 70c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 70e:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 710:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 712:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 714:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 716:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 718:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 71a:	57 9a       	sbi	0x0a, 7	; 10
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	99 ef       	ldi	r25, 0xF9	; 249
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <lcd_init+0x16>
 724:	00 c0       	rjmp	.+0      	; 0x726 <lcd_init+0x1c>
 726:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 728:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 72a:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 72c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>
 730:	8f e1       	ldi	r24, 0x1F	; 31
 732:	9e e4       	ldi	r25, 0x4E	; 78
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <lcd_init+0x2a>
 738:	00 c0       	rjmp	.+0      	; 0x73a <lcd_init+0x30>
 73a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 73c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <lcd_init+0x3a>
 748:	00 c0       	rjmp	.+0      	; 0x74a <lcd_init+0x40>
 74a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 74c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <lcd_init+0x4a>
 758:	00 c0       	rjmp	.+0      	; 0x75a <lcd_init+0x50>
 75a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 75c:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 75e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <toggle_e>
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <lcd_init+0x5c>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <lcd_init+0x62>
 76c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 76e:	88 e2       	ldi	r24, 0x28	; 40
 770:	0e 94 48 03 	call	0x690	; 0x690 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 774:	88 e0       	ldi	r24, 0x08	; 8
 776:	0e 94 48 03 	call	0x690	; 0x690 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 77a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 77e:	86 e0       	ldi	r24, 0x06	; 6
 780:	0e 94 48 03 	call	0x690	; 0x690 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 784:	8c 2f       	mov	r24, r28
}/* lcd_init */
 786:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
    lcd_clrscr();                  /* display clear                */
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
    lcd_command(dispAttr);         /* display/cursor control       */
 788:	0c 94 48 03 	jmp	0x690	; 0x690 <lcd_command>

0000078c <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 7a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 7a4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 7a8:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 7aa:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 7ae:	ef 5f       	subi	r30, 0xFF	; 255
 7b0:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 7b2:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <UART_RxTail>
 7b6:	e2 17       	cp	r30, r18
 7b8:	39 f0       	breq	.+14     	; 0x7c8 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 7ba:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	e9 5b       	subi	r30, 0xB9	; 185
 7c2:	fe 4f       	sbci	r31, 0xFE	; 254
 7c4:	90 83       	st	Z, r25
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 7c8:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 7ca:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART_LastRxError>
 7ce:	89 2b       	or	r24, r25
 7d0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <UART_LastRxError>
}
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	2f 91       	pop	r18
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
 7f6:	ef 93       	push	r30
 7f8:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 7fa:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 7fe:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 802:	98 17       	cp	r25, r24
 804:	69 f0       	breq	.+26     	; 0x820 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 806:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 80a:	ef 5f       	subi	r30, 0xFF	; 255
 80c:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 80e:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	e9 59       	subi	r30, 0x99	; 153
 816:	fe 4f       	sbci	r31, 0xFE	; 254
 818:	80 81       	ld	r24, Z
 81a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 81e:	05 c0       	rjmp	.+10     	; 0x82a <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 820:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 824:	8f 7d       	andi	r24, 0xDF	; 223
 826:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 83c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
    UART_TxTail = 0;
 840:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
    UART_RxHead = 0;
 844:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
    UART_RxTail = 0;
 848:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 84c:	97 ff       	sbrs	r25, 7
 84e:	03 c0       	rjmp	.+6      	; 0x856 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 850:	22 e0       	ldi	r18, 0x02	; 2
 852:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 856:	90 78       	andi	r25, 0x80	; 128
 858:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 85c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 860:	88 e9       	ldi	r24, 0x98	; 152
 862:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 866:	86 e0       	ldi	r24, 0x06	; 6
 868:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 86c:	08 95       	ret

0000086e <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 86e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_RxHead>
 872:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <UART_RxTail>
 876:	98 17       	cp	r25, r24
 878:	a9 f0       	breq	.+42     	; 0x8a4 <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 87a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 87e:	9f 5f       	subi	r25, 0xFF	; 255
 880:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 882:	e9 2f       	mov	r30, r25
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	e9 5b       	subi	r30, 0xB9	; 185
 888:	fe 4f       	sbci	r31, 0xFE	; 254
 88a:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 88c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 890:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <UART_RxTail>

    UART_LastRxError = 0;
 894:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART_LastRxError>
    return (lastRxError << 8) + data;
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	98 2f       	mov	r25, r24
 89c:	88 27       	eor	r24, r24
 89e:	82 0f       	add	r24, r18
 8a0:	91 1d       	adc	r25, r1
 8a2:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 8a8:	08 95       	ret

000008aa <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 8aa:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 8ae:	9f 5f       	subi	r25, 0xFF	; 255
 8b0:	9f 71       	andi	r25, 0x1F	; 31

    while (tmphead == UART_TxTail)
 8b2:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <UART_TxTail>
 8b6:	92 17       	cp	r25, r18
 8b8:	e1 f3       	breq	.-8      	; 0x8b2 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 8ba:	e9 2f       	mov	r30, r25
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	e9 59       	subi	r30, 0x99	; 153
 8c0:	fe 4f       	sbci	r31, 0xFE	; 254
 8c2:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 8c4:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 8c8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8cc:	80 62       	ori	r24, 0x20	; 32
 8ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8d2:	08 95       	ret

000008d4 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	ec 01       	movw	r28, r24
    while (*s)
 8da:	89 91       	ld	r24, Y+
 8dc:	88 23       	and	r24, r24
 8de:	19 f0       	breq	.+6      	; 0x8e6 <uart_puts+0x12>
        uart_putc(*s++);
 8e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <uart_putc>
 8e4:	fa cf       	rjmp	.-12     	; 0x8da <uart_puts+0x6>
}/* uart_puts */
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 8f2:	84 91       	lpm	r24, Z
 8f4:	ef 01       	movw	r28, r30
 8f6:	21 96       	adiw	r28, 0x01	; 1
 8f8:	88 23       	and	r24, r24
 8fa:	21 f0       	breq	.+8      	; 0x904 <__stack+0x5>
        uart_putc(c);
 8fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <uart_putc>
 900:	fe 01       	movw	r30, r28
 902:	f7 cf       	rjmp	.-18     	; 0x8f2 <uart_puts_p+0x6>
}/* uart_puts_p */
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	08 95       	ret

0000090a <rand4_asm>:
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	83 fb       	bst	r24, 3
 910:	00 f9       	bld	r16, 0
 912:	82 fb       	bst	r24, 2
 914:	10 f9       	bld	r17, 0
 916:	01 27       	eor	r16, r17
 918:	88 0f       	add	r24, r24
 91a:	00 95       	com	r16
 91c:	00 fb       	bst	r16, 0
 91e:	80 f9       	bld	r24, 0
 920:	8f 70       	andi	r24, 0x0F	; 15
 922:	1f 91       	pop	r17
 924:	0f 91       	pop	r16
 926:	08 95       	ret

00000928 <rand8_asm>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	87 fb       	bst	r24, 7
 92e:	00 f9       	bld	r16, 0
 930:	85 fb       	bst	r24, 5
 932:	10 f9       	bld	r17, 0
 934:	01 27       	eor	r16, r17
 936:	84 fb       	bst	r24, 4
 938:	10 f9       	bld	r17, 0
 93a:	01 27       	eor	r16, r17
 93c:	83 fb       	bst	r24, 3
 93e:	10 f9       	bld	r17, 0
 940:	01 27       	eor	r16, r17
 942:	88 0f       	add	r24, r24
 944:	00 95       	com	r16
 946:	00 fb       	bst	r16, 0
 948:	80 f9       	bld	r24, 0
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	08 95       	ret

00000950 <main>:
/* Main --------------------------------------------------------------*/
/* Generate a sequence of LFSR preudo-random values using 4- and 8-bit
 * structure. */
int main(void)
{
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); // 8N1
 950:	87 e6       	ldi	r24, 0x67	; 103
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 1e 04 	call	0x83c	; 0x83c <uart_init>

    /* Timer1
     * TODO: Enable overflow interrupt every 33 msec. */
    TIM_config_prescaler(TIM1, TIM_PRESC_8);       //OBNOVOVACI
 958:	61 e0       	ldi	r22, 0x01	; 1
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	0e 94 8e 01 	call	0x31c	; 0x31c <TIM_config_prescaler>
    TIM_config_interrupt(TIM1, TIM_OVERFLOW_ENABLE);
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 48 02 	call	0x490	; 0x490 <TIM_config_interrupt>

    sei();
 968:	78 94       	sei
    uart_puts("\r\n---LFSR pseudo-random generator---\r\n");
 96a:	87 e1       	ldi	r24, 0x17	; 23
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uart_puts>
 972:	ff cf       	rjmp	.-2      	; 0x972 <main+0x22>

00000974 <__tablejump2__>:
 974:	ee 0f       	add	r30, r30
 976:	ff 1f       	adc	r31, r31
 978:	05 90       	lpm	r0, Z+
 97a:	f4 91       	lpm	r31, Z
 97c:	e0 2d       	mov	r30, r0
 97e:	09 94       	ijmp

00000980 <__itoa_ncheck>:
 980:	bb 27       	eor	r27, r27
 982:	4a 30       	cpi	r20, 0x0A	; 10
 984:	31 f4       	brne	.+12     	; 0x992 <__itoa_ncheck+0x12>
 986:	99 23       	and	r25, r25
 988:	22 f4       	brpl	.+8      	; 0x992 <__itoa_ncheck+0x12>
 98a:	bd e2       	ldi	r27, 0x2D	; 45
 98c:	90 95       	com	r25
 98e:	81 95       	neg	r24
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	0c 94 cc 04 	jmp	0x998	; 0x998 <__utoa_common>

00000996 <__utoa_ncheck>:
 996:	bb 27       	eor	r27, r27

00000998 <__utoa_common>:
 998:	fb 01       	movw	r30, r22
 99a:	55 27       	eor	r21, r21
 99c:	aa 27       	eor	r26, r26
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	aa 1f       	adc	r26, r26
 9a4:	a4 17       	cp	r26, r20
 9a6:	10 f0       	brcs	.+4      	; 0x9ac <__utoa_common+0x14>
 9a8:	a4 1b       	sub	r26, r20
 9aa:	83 95       	inc	r24
 9ac:	50 51       	subi	r21, 0x10	; 16
 9ae:	b9 f7       	brne	.-18     	; 0x99e <__utoa_common+0x6>
 9b0:	a0 5d       	subi	r26, 0xD0	; 208
 9b2:	aa 33       	cpi	r26, 0x3A	; 58
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__utoa_common+0x20>
 9b6:	a9 5d       	subi	r26, 0xD9	; 217
 9b8:	a1 93       	st	Z+, r26
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	79 f7       	brne	.-34     	; 0x99c <__utoa_common+0x4>
 9be:	b1 11       	cpse	r27, r1
 9c0:	b1 93       	st	Z+, r27
 9c2:	11 92       	st	Z+, r1
 9c4:	cb 01       	movw	r24, r22
 9c6:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <strrev>

000009ca <strrev>:
 9ca:	dc 01       	movw	r26, r24
 9cc:	fc 01       	movw	r30, r24
 9ce:	67 2f       	mov	r22, r23
 9d0:	71 91       	ld	r23, Z+
 9d2:	77 23       	and	r23, r23
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <strrev+0x4>
 9d6:	32 97       	sbiw	r30, 0x02	; 2
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <strrev+0x18>
 9da:	7c 91       	ld	r23, X
 9dc:	6d 93       	st	X+, r22
 9de:	70 83       	st	Z, r23
 9e0:	62 91       	ld	r22, -Z
 9e2:	ae 17       	cp	r26, r30
 9e4:	bf 07       	cpc	r27, r31
 9e6:	c8 f3       	brcs	.-14     	; 0x9da <strrev+0x10>
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
